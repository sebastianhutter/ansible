---

#
# default configuration for linux hosts
#

# install some default software packages
- name: install must have software (redhat)
  yum: name={{ item }} state=latest
  with_items:
    - nc
    - subversion
    - git
    # necessary for selinux management with ansible
    - libselinux-python
  when: ansible_os_family == "RedHat"

# in addition to the user account we create two groups in which we add the administrators with sudo rights and ssh rights
- name: create local group for users with sudo rights
  group: name=localadmin state=present

- name: create local group for users with ssh rights
  group: name=remoteadmin state=present


# create additional local user with sudo rights 
## which variables could i use for that task?
- name: create local user for administrative access
  user: name=sysprog comment="administrative user account" 
          password=$6$rounds=40000$VNQYBHdL90ev0M/n$MmWR26FLzZvfpX/Z5ViQ89hq6APCBd7zDmMryYkt6sya.zHAXGgKPubl01qtzhdUlAavKEToxT1JBbF9N5AFa1
          state=present
          groups='localadmin,remoteadmin'

# add the ansible system user to the admin groups
# do not add ansible to the local admin group or the user will be asked for the sudo password
- name: add ansible user to admin groups
  user: name=ansible state=present
          groups='remoteadmin'

# copy sudoers configuration for local administrators group
- name: copy sudoers file for localadmin group
  copy: src=sudoers_localadmin dest=/etc/sudoers.d/localadmin owner=root group=root 
          mode=644 backup=yes

# add public key for the user 
- name: add public key for the sysprog user
  authorized_key: user=sysprog key="{{ lookup('file', 'sysprog.pub') }}"

# set the sudoers file for the user
- name: copy sudoers.d file for administrative user account
  copy: src=sudoers_sysprog dest=/etc/sudoers.d/sysprog owner=root group=root 
          mode=644 backup=yes

# if it is a redhat based machine install the epel repositories
- name: install the epel repository if its a redhat based machine
  yum: name=http://dl.fedoraproject.org/pub/epel/6/{{ ansible_architecture }}/epel-release-6-8.noarch.rpm state=present
  when: ansible_os_family == "RedHat"

# do a full system update
- name: update the system (redhat)
  yum: name=* state=latest
  when: ansible_os_family == "RedHat"

- name: update the system (Debian)
  apt: upgrade=dist
  when: ansible_os_family == "Debian"



# reconfigure sshd
- name: reconfigure sshd daemon
  copy: src=sshd_config dest=/etc/ssh/ backup=yes owner=root group=root mode=600
  notify:
  - restart sshd 

# copy banner to host
- name: copy banner (issue) to node
  copy: src=issue dest=/etc/ backup=yes owner=root group=root mode=644

# copy dynamic motd script to the node
- name: copy dynamic motd to the node
  copy: src=dynmotd dest=/usr/local/bin owner=root group=root mode=755

# enable dynamic pseudo motd for every user who logs in
- name: enable dynmotd script
  lineinfile: dest=/etc/profile backup=yes state=present line=/usr/local/bin/dynmotd


#disable ctrl+lt+delete in the console 
# before the override configuration is copied check if the control alt del
# configuration on the host exists
- name: check if the control-alt-delete configuration exists
  command: /usr/bin/test -e /etc/init/control-alt-delete.conf
  register: ctrlexists
  ignore_errors: True

- name: copy the ctrl-alt-delete override configuration
  copy: src=control-alt-delete.override dest=/etc/init/control-alt-delete.override owner=root group=root 
  when: ctrlexists|success

# only allow the console login for a few specific user accounts
- name: allow console login for specific users
  template: src=login.allow.j2 dest=/etc/pam.d/login.allow  mode=0600 owner=root group=root backup=yes

- name: insert pam configuration in login module
  lineinfile: dest=/etc/pam.d/login
    insertafter='^account    required     pam_nologin.so$'
    line='account    required     pam_listfile.so item=user sense=allow file=/etc/pam.d/login.allow onerr=fail quiet'
    state=present

- name: insert pam configuration in sshd module
  lineinfile: dest=/etc/pam.d/sshd
    insertafter='^account    required     pam_nologin.so$'
    line='account    required     pam_listfile.so item=group sense=allow file=/etc/pam.d/sshd.allow onerr=fail quiet'
    state=present

# only allow the ssh login for a few specific user groups
- name: allow shhd login for specific groups 
  template: src=sshd.allow.j2 dest=/etc/pam.d/sshd.allow  mode=0600 owner=root group=root backup=yes

# disable ipv6
- name: disable ipv6 (1/2)
  lineinfile: dest=/etc/sysconfig/network backup=yes state=present line=NETWORKING_IPV6=no

- name: disable ipv6 (2/2)
  lineinfile: dest=/etc/sysconfig/network state=present line=IPV6INIT=no 


