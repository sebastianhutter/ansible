---

#
# install all the necessary socorro dependencies and setup a productive environment 
# as described in the official documentation
#

##
## due to the many command cp instructions this 
## script is no idempotent.
##
##
## we need to change the basic setup of the script
## maybe with rsync?



#
## include vault 
#
- include_vars: secrets.yml

#
## setup the additional repositories
#

- name: install the postgresql repository
  yum: name=http://yum.pgrpms.org/9.4/redhat/rhel-6-{{ ansible_architecture }}/pgdg-centos94-9.4-1.noarch.rpm state=present
  when: ansible_os_family == "RedHat"

- name: add the elasticsearch gpg key for its repository
  rpm_key: state=present key=http://packages.elasticsearch.org/GPG-KEY-elasticsearch

- name: copy the elasticsearch repository config to the node
  copy: src=elasticsearch.repo dest=/etc/yum.repos.d/ backup=yes

# got the repo config file from here:
# http://people.centos.org/tru/devtools-1.1/readme
- name: copy the devtools repo configuration
  copy: src=devtools-1.1.repo dest=/etc/yum.repos.d/ backup=yes

#
## install the necessary pakacges
#

# ########
# ## excluded for testing purposes
# ########
# ########

#- name: install necessary packages
#	  yum: state=latest name={{ item }}
#	  with_items:
#    - postgresql94-server
#    - postgresql94-plperl
#    - postgresql94-contrib
#    - postgresql94-devel
#    - make
#    - rsync
#    - gcc-c++
#    - python-devel
#    - python-pip
#    - mercurial
#    - libxml2-devel
#    - libxslt-devel
#    - java-1.7.0-openjdk
#    - python-virtualenv
#    - npm
#    - devtoolset-1.1-gcc-c++
#    - rabbitmq-server
#    - elasticsearch
#    - httpd
#    - mod_wsgi
#    - memcached
#    - daemonize
#    - mod_ssl
#    - subversion
#    - git
#    - nodejs-less
#	   - python-psycopg2

#
## set python dependencies
#
- name: install python alembic
  pip: state=present name={{ item }}
  with_items:
    - alembic
    - configman
#
## configure rabbitmq
#

- name: (auto)start rabbitmq
  service: state=started enabled=yes name=rabbitmq-server 

#
## configure postgresql
#

#- name: temporary allow the local db superuser auth without password
#  lineinfile: state=present insertafter=EOF dest=/var/lib/pgsql/9.4/data/pg_hba.conf line='host    all    postgres    127.0.0.1/32    peer' backup=yes



# will always trigger the handle restart postgresql because the regexp always stays true
# need to find a better way to solve this.
- name: initiate postgresql database
  command: service postgresql-9.4 initdb 

# linereplacemoent not working
- name: replace the default postgresql timezone with UTC
  template: backup=yes src=postgresql.conf.j2 dest=/var/lib/pgsql/9.4/data/postgresql.conf  
            owner=postgres group=postgres mode=0600
#  lineinfile: state=present backup=yes backrefs=yes dest=/var/lib/pgsql/9.4/data/postgresql.conf 
#              regexp='^(timezone=).*$' line='\1"UTC"'
  notify: restart postgresql

  # lineinfile only replaces one occurence therefore we will use template and copy the file
- name: set the default authentication method to md5
  template: backup=yes src=pg_hba.conf.j2 dest=/var/lib/pgsql/9.4/data/pg_hba.conf  
            owner=postgres group=postgres mode=0600
#  #lineinfile: state=present backup=yes backrefs=yes dest=/var/lib/pgsql/9.4/data/pg_hba.conf  
#              regexp='^(.*)ident$' line='\1md5'
  notify: restart postgresql

- name: (auto)start postgresql service
  service: state=started enabled=yes name=postgresql-9.4

- name: create postgresql database
  sudo_user: postgres
  sudo: yes
  postgresql_db: name={{ database }}

- name: create database user and set privileges
  sudo_user: postgres
  sudo: yes
  postgresql_user: db={{ database }} name={{ dbuser }} password={{ dbpass }} priv=ALL

#- name: remove temporary super user access 
#  lineinfile: state=absent insertafter=EOF dest=/var/lib/pgsql/9.4/data/pg_hba.conf line='host    all    postgres    127.0.0.1/32    peer' 

#
## configure memcached
#
- name: (auto)start memchached
  service: state=started enabled=yes name=memcached

#
## setup the user account and the necessary directories
#

- name: create socorro service user
  user: name=socorro comment='service account for socorro' state=present

- name: create socorro directories 
  file: path={{ item.path }} state=directory owner={{ item.owner }} group={{ item.group }} mode={{ item.mode }}
  with_items:
    - { path: '/etc/socorro', owner: 'root', group: 'root', mode: '0755' }
    - { path: '/var/log/socorro', owner: 'socorro', group: 'socorro', mode: '0755' }
    - { path: '/data', owner: 'root', group: 'root', mode: '0755' }
    - { path: '/data/socorro', owner: 'socorro', group: 'root', mode: '0755' }
    - { path: '/home/socorro/primaryCrashStore', owner: 'apache', group: 'root', mode: '2775' }
    - { path: '/home/socorro/fallback', owner: 'apache', group: 'root', mode: '2775' }
    - { path: '/home/socorro/persistent', owner: 'root', group: 'root', mode: '0755' }

#
## download and install soccoro for production
#


#
# run as sudo
# with checkout var
#

- name: checkout the socorro source
  git: repo=https://github.com/mozilla/socorro dest={{ checkout }}
  su: yes
  su_user: socorro

#
# instead of setting link set global path variable with pg9.4
# 

#- name: create pg_init softlink for postgresql 9.4
#  file: src=/usr/pgsql-9.4/bin/pg_config dest=/usr/bin/pg_config state=link
- name: add postgresql to path
  file: src=pgsql_path.sh  dest=/etc/profile.d/pgsql_path.sh owner=root group=root mode=0644 backup=yes 

#- name: enable devtoolset-1
#  command: scl enable devtoolset-1.1 bash

# run the command as sudo

- name: make breakpad and stackwalker in the checkout directory
  command: chdir={{ checkout }} scl enable devtoolset-1.1 "make breakpad stackwalker" 


# run the command as sudo

# some issues to run make as sudo socorro ... maybe we need to run goit alreadz as socorro
- name: run make inside the checkout directory as the socorro service user
  command: make install chdir={{ checkout }} 

#
## copy the configuration files to the soccorro system directory
#

# the shell module is necessery because of the wildcaqrds. the command module does not support wildcards√ü
- name: copy configuration files
  shell: cp config/*.ini-dist /etc/socorro/ chdir={{ checkout }}

- name: rename the configuration files
  shell: rename .ini-dist .ini *.ini-dist chdir=/etc/socorro

- name: change collector webserver to apache
  lineinfile: dest=/etc/socorro/collector.ini state=present regexp=socorro.webapi.servers.CherryPy line=socorro.webapi.servers.ApacheModWSGI

- name: change middleware webserver to apache
  lineinfile: dest=/etc/socorro/middleware.ini state=present regexp=socorro.webapi.servers.CherryPy line=socorro.webapi.servers.ApacheModWSGI

#
## install the socorro cron job manager
#
- name: copy socorrorc file
  command: cp scripts/crons/socorrorc /etc/socorro chdir={{ checkout }}

- name: copy crontab
  command: cp config/crontab-dist /etc/cron.d/socorro chdir={{ checkout }}

#
## setup the socorro services
#
- name: copy the socorro processor init.d script
  command: cp scripts/init.d/socorro-processor /etc/init.d/ chdir={{ checkout }}

- name: enable socorro processor service
  service: enabled=yes name=socorro-processor state=started


#
## configure djange and apache
#

# apache is configured via templates. right now not a single variable
# is used in them but that will change with the next version of the socorro
# role

- name: copy django configuration to the host
  template: src=local.py.j2 dest=/data/socorro/webapp-django/crashstats/settings/local.py backup=yes

- name: sync django databases
  django_manage: command=syncdb 
    app_path=/data/socorro/webapp-django #virtualenv=/data/socorro/webapp-django/virtualenv 

- name: copy apache configuration to host
  template: src=socorro.conf.j2 dest=/etc/httpd/conf.d/socorro.conf backup=yes 
  notify: restart apache

- name: create htpasswd user for bpapi
  htpasswd: path=/data/socorro/application/.htpasswd state=present name={{ htuser }} password={{ htpass }}

#
## configure local iptables firewall to enable access to all services
#

#- name: open up iptables firewall for socorro
#  ufw: rule=allow port={{ item }} proto=tcp
#  with_items:
#  - 80
#  - 8000
#  - 8883
#  - 8125
#  - 5432

# tcp 80, 8000,  8883, 8125, 5432
# not sure if we need the postgresql port 5432
