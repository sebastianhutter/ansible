---

#
# this playbook installs the dnas docker container on the machine
#

- name: install docker and ansible requirements
  dnf:
    name={{item}}
    state=present
  with_items:
    - docker
    - python-docker-py
    - python3-docker-py
    - nfs-utils
    - fdupes
  tags:
    - setup

- name: allow traffic to the docker containers to pass trough
  command: firewall-cmd --permanent --zone=trusted --change-interface=docker0
  tags:
    - setup
    - firewall

- name: enable docker
  service:
    name="docker"
    state=started
    enabled=yes
  tags:
    - setup

- name: create html directory for info page served by nginx container
  file:
    path={{dnas_html}}
    state=directory
    mode=0755
  tags:
    - setup
    - html

- name: copy html info page to folder
  template:
    src=index.html.j2
    dest={{dnas_html}}/index.html
    mode=0644
  tags:
    - setup
    - html

- name: mount nfs shares for docker, library etc
  mount: 
    name="{{item.value.mount}}"
    src="{{item.value.server}}:{{item.value.path}}"
    fstype="{{item.value.type}}"
    opts="{{item.value.opts}}"
    state=mounted
  with_dict: "{{dnas_nfs}}"
  tags:
    - setup
    - nfs

- name: create local docker volume directory
  file:
    path={{dnas_local}}
    state=directory
    mode=0755
  tags:
    - setup

- name: create backup directory for volumes on docker nfs share
  file:
    path="{{dnas_nfs.docker.mount}}/volbackup"
    state=directory
  tags:
    - setup

- name: create cronjob for regular backup of local docker volume directory
  cron:
    name: "backup local docker volumes"
    special_time: "daily"
    user: root
    job: "/usr/bin/rsync -rlptDz {{dnas_local}}/ {{dnas_nfs.docker.mount}}/volbackup/"
  tags:
    - cronjob
    - t 

- name: couchpotato container
  docker:
    name: couchpotato
    image: sebastianhutter/couchpotato
    state: reloaded
    pull: always
    tty: yes
    restart_policy: "{{dnas_container_couchpotato.restart}}"
    ports:
      "{{dnas_container_couchpotato.ports}}"
    volumes:
      "{{dnas_container_couchpotato.volumes}}"
    command:
      "{{dnas_container_couchpotato_command}}"
  tags:
    - container
    - couchpotato

- name: sabnzbd container
  docker:
    name: sabnzbd
    image: sebastianhutter/sabnzbd
    state: reloaded
    pull: always
    tty: yes
    restart_policy: "{{dnas_container_sabnzbd.restart}}"
    ports:
      "{{dnas_container_sabnzbd.ports}}"
    volumes:
      "{{dnas_container_sabnzbd.volumes}}"
    command:
      "{{dnas_container_sabnzbd_command}}"
  tags:
    - container
    - sabnzbd



# - name: plex container
#   docker:
#     name: plex
#     image: sebastianhutter/plex
#     state: reloaded
#     pull: always
#     tty: yes
#     restart_policy: "{{dnas_container_plex.restart}}"
#     ports:
#       "{{dnas_container_plex.ports}}"
#     volumes:
#       "{{dnas_container_plex.volumes}}"
#     command:
#       "{{dnas_container_plex_command}}"
#   tags:
#     - container
#     - plex

# - name: nginx container
#   docker:
#     name: nginx
#     image: sebastianhutter/nginx
#     state: reloaded
#     pull: always
#     tty: yes
#     restart_policy: "{{dnas_container_nginx.restart}}"
#     ports:
#       "{{dnas_container_nginx.ports}}"
#     volumes:
#       "{{dnas_container_nginx.volumes}}"
#     env:
#       "{{dnas_container_nginx.env}}"
#   tags:
#     - container
#     - nginx

# - name: datadog container
#   docker:
#     name: datadog
#     image: datadog/docker-dd-agent
#     state: reloaded
#     pull: always
#     tty: yes
#     restart_policy: "{{dnas_container_datadog.restart}}"
#     volumes:
#       "{{dnas_container_datadog.volumes}}"
#     env:
#       "{{dnas_container_datadog.env}}"
#   tags:
#     - container
#     - datadog

# - name: ubooquity container
#   docker:
#     name: ubooquity
#     image: sebastianhutter/ubooquity
#     state: reloaded
#     pull: always
#     tty: yes
#     restart_policy: "{{dnas_container_ubooquity.restart}}"
#     ports:
#       "{{dnas_container_ubooquity.ports}}"
#     volumes:
#       "{{dnas_container_ubooquity.volumes}}"
#     env: 
#       "{{dnas_container_ubooquity.env}}"
#   tags:
#     - container
#     - ubooquity

- name: sonarr container
  docker:
    name: sonarr
    image: tuxeh/sonarr
    state: reloaded
    pull: always
    tty: yes
    restart_policy: "{{dnas_container_sonarr.restart}}"
    ports:
      "{{dnas_container_sonarr.ports}}"
    volumes:
      "{{dnas_container_sonarr.volumes}}"
  tags:
    - container
    - sonarr



#
# docker containers which are controlled by systemd
# containers which should be running 24/7 are defined with systemd
#

- name: create environment path
  file:
    path="{{dnas_environment_folder}}"
    state=directory
    owner=root
    group=root
  tags:
    - systemd
    - contaier
    - t

- name: copy environment files for docker containers
  template:
    src=container.env.j2
    dest="{{dnas_environment_folder}}/{{item.value.name}}.env"
  with_dict: "{{docker_containers}}"
  when: item.value.use_systemd 
  notify: reload systemd daemon
  tags:
    - systemd
    - container
    - t

- name: copy systemd service file
  template:
    src=container.service.j2
    dest="/etc/systemd/system/{{item.value.name}}.service"
  with_dict: "{{docker_containers}}"
  when: item.value.use_systemd 
  notify: reload systemd daemon
  tags: 
    - systemd
    - container
    - t

#
# docker containers which are registered in the docker daemon
# usefull for containers which are started by scripts
#

- name: register docker containers in docker - engine
  docker:
    name: "{{item.value.name}}"
    image: "{{item.value.image}}:{{item.value.image_version}}"
    state: present
    pull: always
    tty: "{{item.value.tty}}"
    restart_policy: "{{item.value.restart_policy}}"
    volumes: "{{item.value.volumes}}"
    env: "{{item.value.env}}"
  with_dict: "{{docker_containers}}"
  when: not item.value.use_systemd 
  tags:
    - container 
    - t


#
# podcatcher script
#

- name: copy podcast script
  template:
    src: podcatcher.sh.j2
    dest: /opt/podcatcher.sh
    mode: 0755
  tags:
    - cronjob
    - podcast

- name: start podcast container daily
  cron:
    name: "run podcatcher"
    special_time: "daily"
    user: root
    job: "/opt/podcatcher.sh"
  tags:
    - cronjob
    - podcast


#
# sabnzbd cleanup script
#

- name: copy sabnzbd cleanup script
  template:
    src: cleanup_sabnzbd.sh.j2
    dest: /opt/cleanup_sabnzbd.sh
    mode: 0755
  tags:
    - cronjob
    - sabnzbd

- name: run cleanup script weekly
  cron:
    name: "run sabnzbd cleanup"
    special_time: "weekly"
    user: ansible
    job: "/opt/cleanup_sabnzbd.sh"
  tags:
    - cronjob
    - sabnzbd