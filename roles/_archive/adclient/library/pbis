#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: domjoin
short_description: join or leave a domain
description:
 - Use this module to join an active directory domain.
 - You need to have the PowerBroker OpenIdentity Service Open Editon or Enterprise Edition installed
options:
  state:
    description:
     - set the state of the trust between the computer and domain (present = joined, absent = leaved).
    required: true
    default: present
	choices: [ "present", "absent" ]
  domain:
    description:
     - the name of the domain to join or leave
    required: true
    default: null
  domuser:
    description:
     - the username to do the domain join with.
    required: true
  dompass:
    description:
     - use this password for the domuser (unencrypted).
    required: true
	default: null
  default:
    description:
     -  assue the joined domain the default domain (do not need to write DOMAIN\user for each entry)
     required: false
  ou:
    description:
     - specify the ou in which the computer object should be created.
    required: false
    default: null
author: Sebastian Hutter
'''

EXAMPLES = '''
---
# join domain MYDOMAIN
- pbis: domain=MYDOMAIN domuser=MYUSER dompass=MYPASS default=True

# leave the domain MYDOMAIN
- pbis: domuser=MYUSER dompas=MYPASS state=absent

# join domain MYDOMAIN in a specific ou
- pbis: domain=MYDOMAIN domuser=MYUSER dompass=MYPASS ou=toplevelou/middleou/targetou
'''

def join(domain, domuser, dompass, ou, domainjoin_cmd, result, module):
    if ou:
        join_command = "%s join --ou %s %s %s %s" % (domainjoin_cmd, ou, domain, domuser, dompass)
    else:
        join_command = "%s join %s %s %s" % (domainjoin_cmd, domain, domuser, dompass)        

    rc, out, err = module.run_command(join_command, check_rc=True)
    
    result['changed'] = True
    result['state'] = 'present'
    result['msg'] = out

def leave(domuser, dompass, domainjoin_cmd, result, module):
    leave_command = "%s leave %s %s" % (domainjoin_cmd, domuser, dompass)        
    rc, out, err = module.run_command(leave_command, check_rc=True)
    
    result['changed'] = True
    result['state'] = 'absent'
    result['msg'] = out

def assumedefaultdomain(assume):
    import os.path 
    # just assume that the configuration command is in /opt/pbis 
    assume_command = "/opt/pbis/bin/config AssumeDefaultDomain %s" % (assume)
    rc, out, err = module.run_command(assume_command, check_rc=True)
    
def is_member(domainjoin_cmd, result, module):
    check_command = "%s query" % (domainjoin_cmd)
    rc, out, err = module.run_command(check_command, check_rc=True)
    
    # get the domain name from the command output
    domain = (out.strip())[(out.strip()).rfind("=")+1:]

    if domain:
        return True
    else:
        return False

def main():
    module = AnsibleModule(
        argument_spec = dict(
            domain=dict(required=True,
                        type='str'),
            domuser=dict(required=True,
                         default=None,
                         type='str'),
            dompass=dict(required=True,
                         default=None,
                         type='str'),
            ou=dict(required=False,
                         default=None,
                         type='str'),
            state=dict(required=False,
                       default='present',
                       choices=['present', 'absent'],
                       type='str'),
            default=dict(required=False,
                          choices=BOOLEANS),
        ),
        supports_check_mode=False
    )

    try:
        domainjoin_cmd = module.get_bin_path('domainjoin-cli', True)
    except:
        module.fail_json(msg="could not find domainjoin-cli. is pbis installed?")


    domain = module.params['domain']
    domuser = module.params['domuser']
    dompass = module.params['dompass']
    ou = module.params['ou']
    state = module.params['state']
    default = module.params['default']

    # set the default result
    result = {'state': state, 'changed': False, 'msg': ''}

    ismember = is_member(domainjoin_cmd, result, module)
    
    if state == 'present' and ismember == False:
        join(domain, domuser, dompass, ou, domainjoin_cmd, result, module)
        if module.boolean(default):
          assumedefaultdomain('true')
    if state == 'absent' and ismember == True:
        leave(domuser, dompass, domainjoin_cmd, result, module)

    module.exit_json(**result)

# import module snippets
from ansible.module_utils.basic import *
main()
